// Code generated by mockery v2.31.1. DO NOT EDIT.

package mocks

import (
	context "context"

	comment "github.com/raaaaaaaay86/go-project-structure/domain/context/media/comment"

	mock "github.com/stretchr/testify/mock"
)

// IFindByVideoUseCase is an autogenerated mock type for the IFindByVideoUseCase type
type IFindByVideoUseCase struct {
	mock.Mock
}

// Execute provides a mock function with given fields: ctx, query
func (_m *IFindByVideoUseCase) Execute(ctx context.Context, query comment.FindByVideoQuery) (*comment.FindByVideoResponse, error) {
	ret := _m.Called(ctx, query)

	var r0 *comment.FindByVideoResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, comment.FindByVideoQuery) (*comment.FindByVideoResponse, error)); ok {
		return rf(ctx, query)
	}
	if rf, ok := ret.Get(0).(func(context.Context, comment.FindByVideoQuery) *comment.FindByVideoResponse); ok {
		r0 = rf(ctx, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*comment.FindByVideoResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, comment.FindByVideoQuery) error); ok {
		r1 = rf(ctx, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIFindByVideoUseCase creates a new instance of IFindByVideoUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIFindByVideoUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *IFindByVideoUseCase {
	mock := &IFindByVideoUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
