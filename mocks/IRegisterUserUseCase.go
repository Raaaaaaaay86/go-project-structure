// Code generated by mockery v2.31.1. DO NOT EDIT.

package mocks

import (
	auth "github.com/raaaaaaaay86/go-project-structure/domain/context/auth"
	mock "github.com/stretchr/testify/mock"
)

// IRegisterUserUseCase is an autogenerated mock type for the IRegisterUserUseCase type
type IRegisterUserUseCase struct {
	mock.Mock
}

// Execute provides a mock function with given fields: command
func (_m *IRegisterUserUseCase) Execute(command auth.RegisterUserCommand) (*auth.RegisterUserResponse, error) {
	ret := _m.Called(command)

	var r0 *auth.RegisterUserResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(auth.RegisterUserCommand) (*auth.RegisterUserResponse, error)); ok {
		return rf(command)
	}
	if rf, ok := ret.Get(0).(func(auth.RegisterUserCommand) *auth.RegisterUserResponse); ok {
		r0 = rf(command)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*auth.RegisterUserResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(auth.RegisterUserCommand) error); ok {
		r1 = rf(command)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIRegisterUserUseCase creates a new instance of IRegisterUserUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIRegisterUserUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *IRegisterUserUseCase {
	mock := &IRegisterUserUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
