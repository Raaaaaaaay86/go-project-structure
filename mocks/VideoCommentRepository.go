// Code generated by mockery v2.31.1. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/raaaaaaaay86/go-project-structure/domain/entity"
	mock "github.com/stretchr/testify/mock"

	primitive "go.mongodb.org/mongo-driver/bson/primitive"
)

// VideoCommentRepository is an autogenerated mock type for the VideoCommentRepository type
type VideoCommentRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, comment
func (_m *VideoCommentRepository) Create(ctx context.Context, comment *entity.VideoComment) error {
	ret := _m.Called(ctx, comment)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.VideoComment) error); ok {
		r0 = rf(ctx, comment)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteById provides a mock function with given fields: ctx, id, deleterId
func (_m *VideoCommentRepository) DeleteById(ctx context.Context, id primitive.ObjectID, deleterId uint) (int, error) {
	ret := _m.Called(ctx, id, deleterId)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID, uint) (int, error)); ok {
		return rf(ctx, id, deleterId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID, uint) int); ok {
		r0 = rf(ctx, id, deleterId)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, primitive.ObjectID, uint) error); ok {
		r1 = rf(ctx, id, deleterId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindById provides a mock function with given fields: ctx, id
func (_m *VideoCommentRepository) FindById(ctx context.Context, id primitive.ObjectID) (*entity.VideoComment, error) {
	ret := _m.Called(ctx, id)

	var r0 *entity.VideoComment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID) (*entity.VideoComment, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID) *entity.VideoComment); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.VideoComment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, primitive.ObjectID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByVideoId provides a mock function with given fields: ctx, videoId
func (_m *VideoCommentRepository) FindByVideoId(ctx context.Context, videoId uint) ([]*entity.VideoComment, error) {
	ret := _m.Called(ctx, videoId)

	var r0 []*entity.VideoComment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) ([]*entity.VideoComment, error)); ok {
		return rf(ctx, videoId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint) []*entity.VideoComment); ok {
		r0 = rf(ctx, videoId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.VideoComment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, videoId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ForceDeleteById provides a mock function with given fields: ctx, id
func (_m *VideoCommentRepository) ForceDeleteById(ctx context.Context, id primitive.ObjectID) (int, error) {
	ret := _m.Called(ctx, id)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID) (int, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID) int); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, primitive.ObjectID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewVideoCommentRepository creates a new instance of VideoCommentRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewVideoCommentRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *VideoCommentRepository {
	mock := &VideoCommentRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
