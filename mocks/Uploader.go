// Code generated by mockery v2.31.1. DO NOT EDIT.

package mocks

import (
	io "io"

	bucket "github.com/raaaaaaaay86/go-project-structure/pkg/bucket"

	mock "github.com/stretchr/testify/mock"
)

// Uploader is an autogenerated mock type for the Uploader type
type Uploader struct {
	mock.Mock
}

// Upload provides a mock function with given fields: file, fileName
func (_m *Uploader) Upload(file io.Reader, fileName string) (*bucket.UploadResult, error) {
	ret := _m.Called(file, fileName)

	var r0 *bucket.UploadResult
	var r1 error
	if rf, ok := ret.Get(0).(func(io.Reader, string) (*bucket.UploadResult, error)); ok {
		return rf(file, fileName)
	}
	if rf, ok := ret.Get(0).(func(io.Reader, string) *bucket.UploadResult); ok {
		r0 = rf(file, fileName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bucket.UploadResult)
		}
	}

	if rf, ok := ret.Get(1).(func(io.Reader, string) error); ok {
		r1 = rf(file, fileName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUploader creates a new instance of Uploader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUploader(t interface {
	mock.TestingT
	Cleanup(func())
}) *Uploader {
	mock := &Uploader{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
