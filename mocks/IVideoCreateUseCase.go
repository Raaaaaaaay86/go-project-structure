// Code generated by mockery v2.31.1. DO NOT EDIT.

package mocks

import (
	context "context"

	video "github.com/raaaaaaaay86/go-project-structure/internal/context/media/video"
	mock "github.com/stretchr/testify/mock"
)

// IVideoCreateUseCase is an autogenerated mock type for the IVideoCreateUseCase type
type IVideoCreateUseCase struct {
	mock.Mock
}

// Execute provides a mock function with given fields: ctx, cmd
func (_m *IVideoCreateUseCase) Execute(ctx context.Context, cmd video.CreateVideoCommand) (*video.CreateVideoResponse, error) {
	ret := _m.Called(ctx, cmd)

	var r0 *video.CreateVideoResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, video.CreateVideoCommand) (*video.CreateVideoResponse, error)); ok {
		return rf(ctx, cmd)
	}
	if rf, ok := ret.Get(0).(func(context.Context, video.CreateVideoCommand) *video.CreateVideoResponse); ok {
		r0 = rf(ctx, cmd)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*video.CreateVideoResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, video.CreateVideoCommand) error); ok {
		r1 = rf(ctx, cmd)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIVideoCreateUseCase creates a new instance of IVideoCreateUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIVideoCreateUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *IVideoCreateUseCase {
	mock := &IVideoCreateUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
