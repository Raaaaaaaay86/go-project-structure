// Code generated by mockery v2.31.1. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/raaaaaaaay86/go-project-structure/internal/entity"
	mock "github.com/stretchr/testify/mock"
)

// VideoPostRepository is an autogenerated mock type for the VideoPostRepository type
type VideoPostRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, post
func (_m *VideoPostRepository) Create(ctx context.Context, post *entity.VideoPost) error {
	ret := _m.Called(ctx, post)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.VideoPost) error); ok {
		r0 = rf(ctx, post)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindById provides a mock function with given fields: ctx, id
func (_m *VideoPostRepository) FindById(ctx context.Context, id uint) (*entity.VideoPost, error) {
	ret := _m.Called(ctx, id)

	var r0 *entity.VideoPost
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) (*entity.VideoPost, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint) *entity.VideoPost); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.VideoPost)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Like provides a mock function with given fields: ctx, videoId, userId
func (_m *VideoPostRepository) Like(ctx context.Context, videoId uint, userId uint) error {
	ret := _m.Called(ctx, videoId, userId)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint, uint) error); ok {
		r0 = rf(ctx, videoId, userId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UnLike provides a mock function with given fields: ctx, videoId, userId
func (_m *VideoPostRepository) UnLike(ctx context.Context, videoId uint, userId uint) error {
	ret := _m.Called(ctx, videoId, userId)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint, uint) error); ok {
		r0 = rf(ctx, videoId, userId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: ctx, post
func (_m *VideoPostRepository) Update(ctx context.Context, post *entity.VideoPost) error {
	ret := _m.Called(ctx, post)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.VideoPost) error); ok {
		r0 = rf(ctx, post)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewVideoPostRepository creates a new instance of VideoPostRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewVideoPostRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *VideoPostRepository {
	mock := &VideoPostRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
