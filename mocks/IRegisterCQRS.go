// Code generated by mockery v2.9.6. DO NOT EDIT.

package mocks

import (
	register "github.com/raaaaaaaay86/go-project-structure/domain/context/auth"
	mock "github.com/stretchr/testify/mock"
)

// IRegisterCQRS is an autogenerated mock type for the IRegisterCQRS type
type IRegisterCQRS struct {
	mock.Mock
}

// Execute provides a mock function with given fields: command
func (_m *IRegisterCQRS) Execute(command register.RegisterUserCommand) (*register.RegisterUserResponse, error) {
	ret := _m.Called(command)

	var r0 *register.RegisterUserResponse
	if rf, ok := ret.Get(0).(func(register.RegisterUserCommand) *register.RegisterUserResponse); ok {
		r0 = rf(command)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*register.RegisterUserResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(register.RegisterUserCommand) error); ok {
		r1 = rf(command)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewIRegisterCQRS interface {
	mock.TestingT
	Cleanup(func())
}

// NewIRegisterCQRS creates a new instance of IRegisterCQRS. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIRegisterCQRS(t mockConstructorTestingTNewIRegisterCQRS) *IRegisterCQRS {
	mock := &IRegisterCQRS{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
